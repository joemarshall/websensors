{"version":3,"file":"pyodide.js","sources":["../src/js/module.js","../src/js/load-pyodide.js","../src/js/pyproxy.gen.js","../src/js/api.js","../src/js/pyodide.js"],"sourcesContent":["export let Module = {};\nModule.noImageDecoding = true;\nModule.noAudioDecoding = true;\nModule.noWasmDecoding = false; // we preload wasm using the built in plugin now\nModule.preloadedWasm = {};\n","import { Module } from \"./module\";\n\n/** @typedef {import('./pyproxy.js').PyProxy} PyProxy */\n/** @private */\nlet baseURL;\n/**\n * @param {string} indexURL\n * @private\n */\nexport async function initializePackageIndex(indexURL) {\n  baseURL = indexURL;\n  let response = await fetch(`${indexURL}packages.json`);\n  Module.packages = await response.json();\n}\n\n////////////////////////////////////////////////////////////\n// Package loading\nconst DEFAULT_CHANNEL = \"default channel\";\n\n// Regexp for validating package name and URI\nconst package_uri_regexp = /^.*?([^\\/]*)\\.js$/;\n\nfunction _uri_to_package_name(package_uri) {\n  let match = package_uri_regexp.exec(package_uri);\n  if (match) {\n    return match[1].toLowerCase();\n  }\n}\n\n/**\n * @param {string) url\n * @async\n * @private\n */\nexport let loadScript;\nif (self.document) {\n  // browser\n  loadScript = (url) => import(url);\n} else if (self.importScripts) {\n  // webworker\n  loadScript = async (url) => {\n    // This is async only for consistency\n    self.importScripts(url);\n  };\n} else {\n  throw new Error(\"Cannot determine runtime environment\");\n}\n\nfunction recursiveDependencies(\n  names,\n  _messageCallback,\n  errorCallback,\n  sharedLibsOnly\n) {\n  const packages = Module.packages.dependencies;\n  const sharedLibraries = Module.packages.shared_library;\n  const toLoad = new Map();\n\n  const addPackage = (pkg) => {\n    pkg = pkg.toLowerCase();\n    if (toLoad.has(pkg)) {\n      return;\n    }\n    toLoad.set(pkg, DEFAULT_CHANNEL);\n    // If the package is already loaded, we don't add dependencies, but warn\n    // the user later. This is especially important if the loaded package is\n    // from a custom url, in which case adding dependencies is wrong.\n    if (loadedPackages[pkg] !== undefined) {\n      return;\n    }\n    for (let dep of packages[pkg]) {\n      addPackage(dep);\n    }\n  };\n  for (let name of names) {\n    const pkgname = _uri_to_package_name(name);\n    if (toLoad.has(pkgname) && toLoad.get(pkgname) !== name) {\n      errorCallback(\n        `Loading same package ${pkgname} from ${name} and ${toLoad.get(\n          pkgname\n        )}`\n      );\n      continue;\n    }\n    if (pkgname !== undefined) {\n      toLoad.set(pkgname, name);\n      continue;\n    }\n    name = name.toLowerCase();\n    if (name in packages) {\n      addPackage(name);\n      continue;\n    }\n    errorCallback(`Skipping unknown package '${name}'`);\n  }\n  if (sharedLibsOnly) {\n    let onlySharedLibs = new Map();\n    for (let c of toLoad) {\n      if (c[0] in sharedLibraries) {\n        onlySharedLibs.set(c[0], toLoad.get(c[0]));\n      }\n    }\n    return onlySharedLibs;\n  }\n  return toLoad;\n}\n\nasync function _loadPackage(names, messageCallback, errorCallback) {\n  // toLoad is a map pkg_name => pkg_uri\n  let toLoad = recursiveDependencies(names, messageCallback, errorCallback);\n\n  // locateFile is the function used by the .js file to locate the .data\n  // file given the filename\n  Module.locateFile = (path) => {\n    // handle packages loaded from custom URLs\n    let pkg = path.replace(/\\.data$/, \"\");\n    if (toLoad.has(pkg)) {\n      let package_uri = toLoad.get(pkg);\n      if (package_uri != DEFAULT_CHANNEL) {\n        return package_uri.replace(/\\.js$/, \".data\");\n      }\n    }\n    return baseURL + path;\n  };\n\n  if (toLoad.size === 0) {\n    return Promise.resolve(\"No new packages to load\");\n  } else {\n    let packageNames = Array.from(toLoad.keys()).join(\", \");\n    messageCallback(`Loading ${packageNames}`);\n  }\n\n  // This is a collection of promises that resolve when the package's JS file\n  // is loaded. The promises already handle error and never fail.\n  let scriptPromises = [];\n\n  for (let [pkg, uri] of toLoad) {\n    let loaded = loadedPackages[pkg];\n    if (loaded !== undefined) {\n      // If uri is from the DEFAULT_CHANNEL, we assume it was added as a\n      // depedency, which was previously overridden.\n      if (loaded === uri || uri === DEFAULT_CHANNEL) {\n        messageCallback(`${pkg} already loaded from ${loaded}`);\n        continue;\n      } else {\n        errorCallback(\n          `URI mismatch, attempting to load package ${pkg} from ${uri} ` +\n            `while it is already loaded from ${loaded}. To override a dependency, ` +\n            `load the custom package first.`\n        );\n        continue;\n      }\n    }\n    let pkgname = Module.packages.orig_case[pkg] || pkg;\n    let scriptSrc = uri === DEFAULT_CHANNEL ? `${baseURL}${pkgname}.js` : uri;\n    messageCallback(`Loading ${pkg} from ${scriptSrc}`);\n    scriptPromises.push(\n      loadScript(scriptSrc).catch((e) => {\n        errorCallback(`Couldn't load package from URL ${scriptSrc}`, e);\n        toLoad.delete(pkg);\n      })\n    );\n  }\n\n  // When the JS loads, it synchronously adds a runDependency to emscripten.\n  // It then loads the data file, and removes the runDependency from\n  // emscripten. This function returns a promise that resolves when there are\n  // no pending runDependencies.\n  function waitRunDependency() {\n    const promise = new Promise((r) => {\n      Module.monitorRunDependencies = (n) => {\n        if (n === 0) {\n          r();\n        }\n      };\n    });\n    // If there are no pending dependencies left, monitorRunDependencies will\n    // never be called. Since we can't check the number of dependencies,\n    // manually trigger a call.\n    Module.addRunDependency(\"dummy\");\n    Module.removeRunDependency(\"dummy\");\n    return promise;\n  }\n\n  // We must start waiting for runDependencies *after* all the JS files are\n  // loaded, since the number of runDependencies may happen to equal zero\n  // between package files loading.\n  try {\n    await Promise.all(scriptPromises).then(waitRunDependency);\n  } finally {\n    delete Module.monitorRunDependencies;\n  }\n\n  let packageList = [];\n  for (let [pkg, uri] of toLoad) {\n    loadedPackages[pkg] = uri;\n    packageList.push(pkg);\n  }\n\n  let resolveMsg;\n  if (packageList.length > 0) {\n    let packageNames = packageList.join(\", \");\n    resolveMsg = `Loaded ${packageNames}`;\n  } else {\n    resolveMsg = \"No packages loaded\";\n  }\n\n  Module.reportUndefinedSymbols();\n\n  messageCallback(resolveMsg);\n\n  // We have to invalidate Python's import caches, or it won't\n  // see the new files.\n  Module.runPythonSimple(\n    \"import importlib\\n\" + \"importlib.invalidate_caches()\\n\"\n  );\n}\n\n// This is a promise that is resolved iff there are no pending package loads.\n// It never fails.\nlet _package_lock = Promise.resolve();\n\n/**\n * An async lock for package loading. Prevents race conditions in loadPackage.\n * @returns A zero argument function that releases the lock.\n * @private\n */\nasync function acquirePackageLock() {\n  let old_lock = _package_lock;\n  let releaseLock;\n  _package_lock = new Promise((resolve) => (releaseLock = resolve));\n  await old_lock;\n  return releaseLock;\n}\n\n/**\n *\n * The list of packages that Pyodide has loaded.\n * Use ``Object.keys(pyodide.loadedPackages)`` to get the list of names of\n * loaded packages, and ``pyodide.loadedPackages[package_name]`` to access\n * install location for a particular ``package_name``.\n *\n * @type {object}\n */\nexport let loadedPackages = {};\n\n/**\n * @callback LogFn\n * @param {string} msg\n * @returns {void}\n * @private\n */\n\n/**\n * Load a package or a list of packages over the network. This installs the\n * package in the virtual filesystem. The package needs to be imported from\n * Python before it can be used.\n * @param {string | string[] | PyProxy} names Either a single package name or URL\n * or a list of them. URLs can be absolute or relative. The URLs must have\n * file name\n * ``<package-name>.js`` and there must be a file called\n * ``<package-name>.data`` in the same directory. The argument can be a\n * ``PyProxy`` of a list, in which case the list will be converted to\n * Javascript and the ``PyProxy`` will be destroyed.\n * @param {LogFn=} messageCallback A callback, called with progress messages\n *    (optional)\n * @param {LogFn=} errorCallback A callback, called with error/warning\n *    messages (optional)\n * @async\n */\nexport async function loadPackage(names, messageCallback, errorCallback) {\n  if (Module.isPyProxy(names)) {\n    let temp;\n    try {\n      temp = names.toJs();\n    } finally {\n      names.destroy();\n    }\n    names = temp;\n  }\n\n  if (!Array.isArray(names)) {\n    names = [names];\n  }\n  // get shared library packages and load those first\n  // otherwise bad things happen with linking them in firefox.\n  let sharedLibraryNames = [];\n  try {\n    let sharedLibraryPackagesToLoad = recursiveDependencies(\n      names,\n      messageCallback,\n      errorCallback,\n      true\n    );\n    for (let pkg of sharedLibraryPackagesToLoad) {\n      sharedLibraryNames.push(pkg[0]);\n    }\n  } catch (e) {\n    // do nothing - let the main load throw any errors\n  }\n  // override the load plugin so that it imports any dlls also\n  // this only needs to be done for shared library packages because\n  // we assume that if a package depends on a shared library\n  // it needs to have access to it.\n  // not needed for so in standard module because those are linked together\n  // correctly, it is only where linking goes across modules that it needs to\n  // be done. Hence we only put this extra preload plugin in during the shared\n  // library load\n  let oldPlugin;\n  for (let p in Module.preloadPlugins) {\n    if (Module.preloadPlugins[p].canHandle(\"test.so\")) {\n      oldPlugin = Module.preloadPlugins[p];\n      break;\n    }\n  }\n  let dynamicLoadHandler = {\n    get: function (obj, prop) {\n      if (prop === \"handle\") {\n        return function (bytes, name) {\n          obj[prop].apply(obj, arguments);\n          this[\"asyncWasmLoadPromise\"] = this[\"asyncWasmLoadPromise\"].then(\n            function () {\n              Module.loadDynamicLibrary(name, {\n                global: true,\n                nodelete: true,\n              });\n            }\n          );\n        };\n      } else {\n        return obj[prop];\n      }\n    },\n  };\n  var loadPluginOverride = new Proxy(oldPlugin, dynamicLoadHandler);\n  // restore the preload plugin\n  Module.preloadPlugins.unshift(loadPluginOverride);\n\n  let releaseLock = await acquirePackageLock();\n  try {\n    await _loadPackage(\n      sharedLibraryNames,\n      messageCallback || console.log,\n      errorCallback || console.error\n    );\n    Module.preloadPlugins.shift(loadPluginOverride);\n    await _loadPackage(\n      names,\n      messageCallback || console.log,\n      errorCallback || console.error\n    );\n  } finally {\n    releaseLock();\n  }\n}\n","// This file is generated by applying the C preprocessor to core/pyproxy.js\n// It uses the macros defined in core/pyproxy.c\n// Do not edit it directly!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Every public Python entrypoint goes through this file! The main entrypoint is\n * the callPyObject method, but of course one can also execute arbitrary code\n * via the various __dundermethods__ associated to classes.\n *\n * The only entrypoint into Python that avoids this file is our bootstrap method\n * runPythonSimple which is defined in main.c\n *\n * Any time we call into wasm, the call should be wrapped in a try catch block.\n * This way if a Javascript error emerges from the wasm, we can escalate it to a\n * fatal error.\n *\n * This is file is preprocessed with -imacros \"pyproxy.c\". As a result of this,\n * any macros available in pyproxy.c are available here. We only need the flags\n * macros HAS_LENGTH, etc.\n *\n * See Makefile recipe for src/js/pyproxy.js\n */\n\nimport { Module } from \"../js/module\";\n\n/**\n * Is the argument a :any:`PyProxy`?\n * @param jsobj {any} Object to test.\n * @returns {jsobj is PyProxy} Is ``jsobj`` a :any:`PyProxy`?\n */\nexport function isPyProxy(jsobj) {\n  return !!jsobj && jsobj.$$ !== undefined && jsobj.$$.type === \"PyProxy\";\n}\nModule.isPyProxy = isPyProxy;\n\nif (globalThis.FinalizationRegistry) {\n  Module.finalizationRegistry = new FinalizationRegistry((ptr) => {\n    try {\n      Module._Py_DecRef(ptr);\n    } catch (e) {\n      // I'm not really sure what happens if an error occurs inside of a\n      // finalizer...\n      Module.fatal_error(e);\n    }\n  });\n  // For some unclear reason this code screws up selenium FirefoxDriver. Works\n  // fine in chrome and when I test it in browser. It seems to be sensitive to\n  // changes that don't make a difference to the semantics.\n  // TODO: after v0.17.0 release, fix selenium issues with this code.\n  // Module.bufferFinalizationRegistry = new FinalizationRegistry((ptr) => {\n  //   try {\n  //     Module._PyBuffer_Release(ptr);\n  //     Module._PyMem_Free(ptr);\n  //   } catch (e) {\n  //     Module.fatal_error(e);\n  //   }\n  // });\n} else {\n  Module.finalizationRegistry = { register() {}, unregister() {} };\n  // Module.bufferFinalizationRegistry = finalizationRegistry;\n}\n\nlet pyproxy_alloc_map = new Map();\nModule.pyproxy_alloc_map = pyproxy_alloc_map;\nlet trace_pyproxy_alloc;\nlet trace_pyproxy_dealloc;\n\nModule.enable_pyproxy_allocation_tracing = function () {\n  trace_pyproxy_alloc = function (proxy) {\n    pyproxy_alloc_map.set(proxy, Error().stack);\n  };\n  trace_pyproxy_dealloc = function (proxy) {\n    pyproxy_alloc_map.delete(proxy);\n  };\n};\nModule.disable_pyproxy_allocation_tracing = function () {\n  trace_pyproxy_alloc = function (proxy) {};\n  trace_pyproxy_dealloc = function (proxy) {};\n};\nModule.disable_pyproxy_allocation_tracing();\n\n/**\n * In the case that the Python object is callable, PyProxyClass inherits from\n * Function so that PyProxy objects can be callable.\n *\n * The following properties on a Python object will be shadowed in the proxy\n * in the case that the Python object is callable:\n *  - \"arguments\" and\n *  - \"caller\"\n *\n * Inheriting from Function has the unfortunate side effect that we MUST\n * expose the members \"proxy.arguments\" and \"proxy.caller\" because they are\n * nonconfigurable, nonwritable, nonenumerable own properties. They are just\n * always `null`.\n *\n * We also get the properties \"length\" and \"name\" which are configurable so we\n * delete them in the constructor. \"prototype\" is not configurable so we can't\n * delete it, however it *is* writable so we set it to be undefined. We must\n * still make \"prototype in proxy\" be true though.\n * @private\n */\nModule.pyproxy_new = function (ptrobj) {\n  let flags = Module._pyproxy_getflags(ptrobj);\n  let cls = Module.getPyProxyClass(flags);\n  // Reflect.construct calls the constructor of Module.PyProxyClass but sets\n  // the prototype as cls.prototype. This gives us a way to dynamically create\n  // subclasses of PyProxyClass (as long as we don't need to use the \"new\n  // cls(ptrobj)\" syntax).\n  let target;\n  if (flags & (1 << 8)) {\n    // To make a callable proxy, we must call the Function constructor.\n    // In this case we are effectively subclassing Function.\n    target = Reflect.construct(Function, [], cls);\n    // Remove undesirable properties added by Function constructor. Note: we\n    // can't remove \"arguments\" or \"caller\" because they are not configurable\n    // and not writable\n    delete target.length;\n    delete target.name;\n    // prototype isn't configurable so we can't delete it but it's writable.\n    target.prototype = undefined;\n  } else {\n    target = Object.create(cls.prototype);\n  }\n  Object.defineProperty(target, \"$$\", {\n    value: { ptr: ptrobj, type: \"PyProxy\" },\n  });\n  Module._Py_IncRef(ptrobj);\n  let proxy = new Proxy(target, PyProxyHandlers);\n  trace_pyproxy_alloc(proxy);\n  Module.finalizationRegistry.register(proxy, ptrobj, proxy);\n  return proxy;\n};\n\nfunction _getPtr(jsobj) {\n  let ptr = jsobj.$$.ptr;\n  if (ptr === null) {\n    throw new Error(\n      jsobj.$$.destroyed_msg || \"Object has already been destroyed\"\n    );\n  }\n  return ptr;\n}\n\nlet pyproxyClassMap = new Map();\n/**\n * Retreive the appropriate mixins based on the features requested in flags.\n * Used by pyproxy_new. The \"flags\" variable is produced by the C function\n * pyproxy_getflags. Multiple PyProxies with the same set of feature flags\n * will share the same prototype, so the memory footprint of each individual\n * PyProxy is minimal.\n * @private\n */\nModule.getPyProxyClass = function (flags) {\n  let result = pyproxyClassMap.get(flags);\n  if (result) {\n    return result;\n  }\n  let descriptors = {};\n  for (let [feature_flag, methods] of [\n    [(1 << 0), PyProxyLengthMethods],\n    [(1 << 1), PyProxyGetItemMethods],\n    [(1 << 2), PyProxySetItemMethods],\n    [(1 << 3), PyProxyContainsMethods],\n    [(1 << 4), PyProxyIterableMethods],\n    [(1 << 5), PyProxyIteratorMethods],\n    [(1 << 6), PyProxyAwaitableMethods],\n    [(1 << 7), PyProxyBufferMethods],\n    [(1 << 8), PyProxyCallableMethods],\n  ]) {\n    if (flags & feature_flag) {\n      Object.assign(\n        descriptors,\n        Object.getOwnPropertyDescriptors(methods.prototype)\n      );\n    }\n  }\n  // Use base constructor (just throws an error if construction is attempted).\n  descriptors.constructor = Object.getOwnPropertyDescriptor(\n    PyProxyClass.prototype,\n    \"constructor\"\n  );\n  Object.assign(\n    descriptors,\n    Object.getOwnPropertyDescriptors({ $$flags: flags })\n  );\n  let new_proto = Object.create(PyProxyClass.prototype, descriptors);\n  function NewPyProxyClass() {}\n  NewPyProxyClass.prototype = new_proto;\n  pyproxyClassMap.set(flags, NewPyProxyClass);\n  return NewPyProxyClass;\n};\n\n// Static methods\nModule.PyProxy_getPtr = _getPtr;\n\n// Now a lot of boilerplate to wrap the abstract Object protocol wrappers\n// defined in pyproxy.c in Javascript functions.\n\nModule.callPyObjectKwargs = function (ptrobj, ...jsargs) {\n  // We don't do any checking for kwargs, checks are in PyProxy.callKwargs\n  // which only is used when the keyword arguments come from the user.\n  let kwargs = jsargs.pop();\n  let num_pos_args = jsargs.length;\n  let kwargs_names = Object.keys(kwargs);\n  let kwargs_values = Object.values(kwargs);\n  let num_kwargs = kwargs_names.length;\n  jsargs.push(...kwargs_values);\n\n  let idargs = Module.hiwire.new_value(jsargs);\n  let idkwnames = Module.hiwire.new_value(kwargs_names);\n  let idresult;\n  try {\n    idresult = Module.__pyproxy_apply(\n      ptrobj,\n      idargs,\n      num_pos_args,\n      idkwnames,\n      num_kwargs\n    );\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module.hiwire.decref(idargs);\n    Module.hiwire.decref(idkwnames);\n  }\n  if (idresult === 0) {\n    Module._pythonexc2js();\n  }\n  return Module.hiwire.pop_value(idresult);\n};\n\nModule.callPyObject = function (ptrobj, ...jsargs) {\n  return Module.callPyObjectKwargs(ptrobj, ...jsargs, {});\n};\n\n/**\n * @typedef {(PyProxyClass & {[x : string] : Py2JsResult})} PyProxy\n * @typedef { PyProxy | number | bigint | string | boolean | undefined } Py2JsResult\n */\nclass PyProxyClass {\n  constructor() {\n    throw new TypeError(\"PyProxy is not a constructor\");\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"PyProxy\";\n  }\n  /**\n   * The name of the type of the object.\n   *\n   * Usually the value is ``\"module.name\"`` but for builtins or\n   * interpreter-defined types it is just ``\"name\"``. As pseudocode this is:\n   *\n   * .. code-block:: python\n   *\n   *    ty = type(x)\n   *    if ty.__module__ == 'builtins' or ty.__module__ == \"__main__\":\n   *        return ty.__name__\n   *    else:\n   *        ty.__module__ + \".\" + ty.__name__\n   *\n   * @type {string}\n   */\n  get type() {\n    let ptrobj = _getPtr(this);\n    return Module.hiwire.pop_value(Module.__pyproxy_type(ptrobj));\n  }\n  /**\n   * @returns {string}\n   */\n  toString() {\n    let ptrobj = _getPtr(this);\n    let jsref_repr;\n    try {\n      jsref_repr = Module.__pyproxy_repr(ptrobj);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n    if (jsref_repr === 0) {\n      Module._pythonexc2js();\n    }\n    return Module.hiwire.pop_value(jsref_repr);\n  }\n  /**\n   * Destroy the ``PyProxy``. This will release the memory. Any further\n   * attempt to use the object will raise an error.\n   *\n   * In a browser supporting `FinalizationRegistry\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry>`_\n   * Pyodide will automatically destroy the ``PyProxy`` when it is garbage\n   * collected, however there is no guarantee that the finalizer will be run\n   * in a timely manner so it is better to ``destory`` the proxy explicitly.\n   *\n   * @param {string} [destroyed_msg] The error message to print if use is\n   *        attempted after destroying. Defaults to \"Object has already been\n   *        destroyed\".\n   */\n  destroy(destroyed_msg) {\n    let ptrobj = _getPtr(this);\n    Module.finalizationRegistry.unregister(this);\n    // Maybe the destructor will call Javascript code that will somehow try\n    // to use this proxy. Mark it deleted before decrementing reference count\n    // just in case!\n    this.$$.ptr = null;\n    this.$$.destroyed_msg = destroyed_msg;\n    try {\n      Module._Py_DecRef(ptrobj);\n      trace_pyproxy_dealloc(this);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n  }\n  /**\n   * Make a new PyProxy pointing to the same Python object.\n   * Useful if the PyProxy is destroyed somewhere else.\n   * @returns {PyProxy}\n   */\n  copy() {\n    let ptrobj = _getPtr(this);\n    return Module.pyproxy_new(ptrobj);\n  }\n  /**\n   * Converts the ``PyProxy`` into a Javascript object as best as possible. By\n   * default does a deep conversion, if a shallow conversion is desired, you\n   * can use ``proxy.toJs(1)``.\n   * See :ref:`Explicit Conversion of PyProxy\n   * <type-translations-pyproxy-to-js>` for more info.\n   *\n   * @param {number} depth How many layers deep to perform the conversion.\n   * Defaults to infinite.\n   * @return {any} The Javascript object resulting from the conversion.\n   */\n  toJs(depth = -1) {\n    let ptrobj = _getPtr(this);\n    let idresult;\n    let proxies = Module.hiwire.new_value([]);\n    try {\n      idresult = Module._python2js_with_depth(ptrobj, depth, proxies);\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(proxies);\n    }\n    if (idresult === 0) {\n      Module._pythonexc2js();\n    }\n    return Module.hiwire.pop_value(idresult);\n  }\n  /**\n   * Check whether the :any:`PyProxy.length` getter is available on this PyProxy. A\n   * Typescript type guard.\n   * @returns {this is PyProxyWithLength}\n   */\n  supportsLength() {\n    return !!(this.$$flags & (1 << 0));\n  }\n  /**\n   * Check whether the :any:`PyProxy.get` method is available on this PyProxy. A\n   * Typescript type guard.\n   * @returns {this is PyProxyWithGet}\n   */\n  supportsGet() {\n    return !!(this.$$flags & (1 << 1));\n  }\n  /**\n   * Check whether the :any:`PyProxy.set` method is available on this PyProxy. A\n   * Typescript type guard.\n   * @returns {this is PyProxyWithSet}\n   */\n  supportsSet() {\n    return !!(this.$$flags & (1 << 2));\n  }\n  /**\n   * Check whether the :any:`PyProxy.has` method is available on this PyProxy. A\n   * Typescript type guard.\n   * @returns {this is PyProxyWithHas}\n   */\n  supportsHas() {\n    return !!(this.$$flags & (1 << 3));\n  }\n  /**\n   * Check whether the PyProxy is iterable. A Typescript type guard for\n   * :any:`PyProxy.[Symbol.iterator]`.\n   * @returns {this is PyProxyIterable}\n   */\n  isIterable() {\n    return !!(this.$$flags & ((1 << 4) | (1 << 5)));\n  }\n  /**\n   * Check whether the PyProxy is iterable. A Typescript type guard for\n   * :any:`PyProxy.next`.\n   * @returns {this is PyProxyIterator}\n   */\n  isIterator() {\n    return !!(this.$$flags & (1 << 5));\n  }\n  /**\n   * Check whether the PyProxy is awaitable. A Typescript type guard, if this\n   * function returns true Typescript considers the PyProxy to be a ``Promise``.\n   * @returns {this is PyProxyAwaitable}\n   */\n  isAwaitable() {\n    return !!(this.$$flags & (1 << 6));\n  }\n  /**\n   * Check whether the PyProxy is a buffer. A Typescript type guard for\n   * :any:`PyProxy.getBuffer`.\n   * @returns {this is PyProxyBuffer}\n   */\n  isBuffer() {\n    return !!(this.$$flags & (1 << 7));\n  }\n  /**\n   * Check whether the PyProxy is a Callable. A Typescript type guard, if this\n   * returns true then Typescript considers the Proxy to be callable of\n   * signature ``(args... : any[]) => PyProxy | number | bigint | string |\n   * boolean | undefined``.\n   * @returns {this is PyProxyCallable}\n   */\n  isCallable() {\n    return !!(this.$$flags & (1 << 8));\n  }\n}\n\n/**\n * @typedef { PyProxy & PyProxyLengthMethods } PyProxyWithLength\n */\n// Controlled by HAS_LENGTH, appears for any object with __len__ or sq_length\n// or mp_length methods\nclass PyProxyLengthMethods {\n  /**\n   * The length of the object.\n   *\n   * Present only if the proxied Python object has a ``__len__`` method.\n   * @returns {number}\n   */\n  get length() {\n    let ptrobj = _getPtr(this);\n    let length;\n    try {\n      length = Module._PyObject_Size(ptrobj);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n    if (length === -1) {\n      Module._pythonexc2js();\n    }\n    return length;\n  }\n}\n\n/**\n * @typedef {PyProxy & PyProxyGetItemMethods} PyProxyWithGet\n */\n\n// Controlled by HAS_GET, appears for any class with __getitem__,\n// mp_subscript, or sq_item methods\n/**\n * @interface\n */\nclass PyProxyGetItemMethods {\n  /**\n   * This translates to the Python code ``obj[key]``.\n   *\n   * Present only if the proxied Python object has a ``__getitem__`` method.\n   *\n   * @param {any} key The key to look up.\n   * @returns {Py2JsResult} The corresponding value.\n   */\n  get(key) {\n    let ptrobj = _getPtr(this);\n    let idkey = Module.hiwire.new_value(key);\n    let idresult;\n    try {\n      idresult = Module.__pyproxy_getitem(ptrobj, idkey);\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(idkey);\n    }\n    if (idresult === 0) {\n      if (Module._PyErr_Occurred()) {\n        Module._pythonexc2js();\n      } else {\n        return undefined;\n      }\n    }\n    return Module.hiwire.pop_value(idresult);\n  }\n}\n\n/**\n * @typedef {PyProxy & PyProxySetItemMethods} PyProxyWithSet\n */\n// Controlled by HAS_SET, appears for any class with __setitem__, __delitem__,\n// mp_ass_subscript,  or sq_ass_item.\nclass PyProxySetItemMethods {\n  /**\n   * This translates to the Python code ``obj[key] = value``.\n   *\n   * Present only if the proxied Python object has a ``__setitem__`` method.\n   *\n   * @param {any} key The key to set.\n   * @param {any} value The value to set it to.\n   */\n  set(key, value) {\n    let ptrobj = _getPtr(this);\n    let idkey = Module.hiwire.new_value(key);\n    let idval = Module.hiwire.new_value(value);\n    let errcode;\n    try {\n      errcode = Module.__pyproxy_setitem(ptrobj, idkey, idval);\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(idkey);\n      Module.hiwire.decref(idval);\n    }\n    if (errcode === -1) {\n      Module._pythonexc2js();\n    }\n  }\n  /**\n   * This translates to the Python code ``del obj[key]``.\n   *\n   * Present only if the proxied Python object has a ``__delitem__`` method.\n   *\n   * @param {any} key The key to delete.\n   */\n  delete(key) {\n    let ptrobj = _getPtr(this);\n    let idkey = Module.hiwire.new_value(key);\n    let errcode;\n    try {\n      errcode = Module.__pyproxy_delitem(ptrobj, idkey);\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(idkey);\n    }\n    if (errcode === -1) {\n      Module._pythonexc2js();\n    }\n  }\n}\n\n/**\n * @typedef {PyProxy & PyProxyContainsMethods} PyProxyWithHas\n */\n\n// Controlled by HAS_CONTAINS flag, appears for any class with __contains__ or\n// sq_contains\nclass PyProxyContainsMethods {\n  /**\n   * This translates to the Python code ``key in obj``.\n   *\n   * Present only if the proxied Python object has a ``__contains__`` method.\n   *\n   * @param {*} key The key to check for.\n   * @returns {boolean} Is ``key`` present?\n   */\n  has(key) {\n    let ptrobj = _getPtr(this);\n    let idkey = Module.hiwire.new_value(key);\n    let result;\n    try {\n      result = Module.__pyproxy_contains(ptrobj, idkey);\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(idkey);\n    }\n    if (result === -1) {\n      Module._pythonexc2js();\n    }\n    return result === 1;\n  }\n}\n\nclass TempError extends Error {}\n\n/**\n * A helper for [Symbol.iterator].\n *\n * Because \"it is possible for a generator to be garbage collected without\n * ever running its finally block\", we take extra care to try to ensure that\n * we don't leak the iterator. We register it with the finalizationRegistry,\n * but if the finally block is executed, we decref the pointer and unregister.\n *\n * In order to do this, we create the generator with this inner method,\n * register the finalizer, and then return it.\n *\n * Quote from:\n * https://hacks.mozilla.org/2015/07/es6-in-depth-generators-continued/\n *\n * @private\n */\nfunction* iter_helper(iterptr, token) {\n  try {\n    if (iterptr === 0) {\n      throw new TempError();\n    }\n    let item;\n    while ((item = Module.__pyproxy_iter_next(iterptr))) {\n      yield Module.hiwire.pop_value(item);\n    }\n    if (Module._PyErr_Occurred()) {\n      throw new TempError();\n    }\n  } catch (e) {\n    if (e instanceof TempError) {\n      Module._pythonexc2js();\n    } else {\n      Module.fatal_error(e);\n    }\n  } finally {\n    Module.finalizationRegistry.unregister(token);\n    Module._Py_DecRef(iterptr);\n  }\n}\n\n/**\n * @typedef {PyProxy & PyProxyIterableMethods} PyProxyIterable\n */\n\n// Controlled by IS_ITERABLE, appears for any object with __iter__ or tp_iter,\n// unless they are iterators. See: https://docs.python.org/3/c-api/iter.html\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n// This avoids allocating a PyProxy wrapper for the temporary iterator.\nclass PyProxyIterableMethods {\n  /**\n   * This translates to the Python code ``iter(obj)``. Return an iterator\n   * associated to the proxy. See the documentation for `Symbol.iterator\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator>`_.\n   *\n   * Present only if the proxied Python object is iterable (i.e., has an\n   * ``__iter__`` method).\n   *\n   * This will be used implicitly by ``for(let x of proxy){}``.\n   *\n   * @returns {Iterator<Py2JsResult, Py2JsResult, any>} An iterator for the proxied Python object.\n   */\n  [Symbol.iterator]() {\n    let ptrobj = _getPtr(this);\n    let token = {};\n    let iterptr;\n    try {\n      iterptr = Module._PyObject_GetIter(ptrobj);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n\n    let result = iter_helper(iterptr, token);\n    Module.finalizationRegistry.register(result, iterptr, token);\n    return result;\n  }\n}\n\n/**\n * @typedef {PyProxy & PyProxyIteratorMethods} PyProxyIterator\n */\n\n// Controlled by IS_ITERATOR, appears for any object with a __next__ or\n// tp_iternext method.\nclass PyProxyIteratorMethods {\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * This translates to the Python code ``next(obj)``. Returns the next value\n   * of the generator. See the documentation for `Generator.prototype.next\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next>`_.\n   * The argument will be sent to the Python generator.\n   *\n   * This will be used implicitly by ``for(let x of proxy){}``.\n   *\n   * Present only if the proxied Python object is a generator or iterator\n   * (i.e., has a ``send`` or ``__next__`` method).\n   *\n   * @param {any=} [value] The value to send to the generator. The value will be\n   * assigned as a result of a yield expression.\n   * @returns {IteratorResult<Py2JsResult, Py2JsResult>} An Object with two properties: ``done`` and ``value``.\n   * When the generator yields ``some_value``, ``next`` returns ``{done :\n   * false, value : some_value}``. When the generator raises a\n   * ``StopIteration(result_value)`` exception, ``next`` returns ``{done :\n   * true, value : result_value}``.\n   */\n  next(arg = undefined) {\n    let idresult;\n    // Note: arg is optional, if arg is not supplied, it will be undefined\n    // which gets converted to \"Py_None\". This is as intended.\n    let idarg = Module.hiwire.new_value(arg);\n    let done;\n    try {\n      idresult = Module.__pyproxyGen_Send(_getPtr(this), idarg);\n      done = idresult === 0;\n      if (done) {\n        idresult = Module.__pyproxyGen_FetchStopIterationValue();\n      }\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(idarg);\n    }\n    if (done && idresult === 0) {\n      Module._pythonexc2js();\n    }\n    let value = Module.hiwire.pop_value(idresult);\n    return { done, value };\n  }\n}\n\n// Another layer of boilerplate. The PyProxyHandlers have some annoying logic\n// to deal with straining out the spurious \"Function\" properties \"prototype\",\n// \"arguments\", and \"length\", to deal with correctly satisfying the Proxy\n// invariants, and to deal with the mro\nfunction python_hasattr(jsobj, jskey) {\n  let ptrobj = _getPtr(jsobj);\n  let idkey = Module.hiwire.new_value(jskey);\n  let result;\n  try {\n    result = Module.__pyproxy_hasattr(ptrobj, idkey);\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module.hiwire.decref(idkey);\n  }\n  if (result === -1) {\n    Module._pythonexc2js();\n  }\n  return result !== 0;\n}\n\n// Returns a JsRef in order to allow us to differentiate between \"not found\"\n// (in which case we return 0) and \"found 'None'\" (in which case we return\n// Js_undefined).\nfunction python_getattr(jsobj, jskey) {\n  let ptrobj = _getPtr(jsobj);\n  let idkey = Module.hiwire.new_value(jskey);\n  let idresult;\n  try {\n    idresult = Module.__pyproxy_getattr(ptrobj, idkey);\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module.hiwire.decref(idkey);\n  }\n  if (idresult === 0) {\n    if (Module._PyErr_Occurred()) {\n      Module._pythonexc2js();\n    }\n  }\n  return idresult;\n}\n\nfunction python_setattr(jsobj, jskey, jsval) {\n  let ptrobj = _getPtr(jsobj);\n  let idkey = Module.hiwire.new_value(jskey);\n  let idval = Module.hiwire.new_value(jsval);\n  let errcode;\n  try {\n    errcode = Module.__pyproxy_setattr(ptrobj, idkey, idval);\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module.hiwire.decref(idkey);\n    Module.hiwire.decref(idval);\n  }\n  if (errcode === -1) {\n    Module._pythonexc2js();\n  }\n}\n\nfunction python_delattr(jsobj, jskey) {\n  let ptrobj = _getPtr(jsobj);\n  let idkey = Module.hiwire.new_value(jskey);\n  let errcode;\n  try {\n    errcode = Module.__pyproxy_delattr(ptrobj, idkey);\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module.hiwire.decref(idkey);\n  }\n  if (errcode === -1) {\n    Module._pythonexc2js();\n  }\n}\n\n// See explanation of which methods should be defined here and what they do\n// here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\nlet PyProxyHandlers = {\n  isExtensible() {\n    return (!!1);\n  },\n  has(jsobj, jskey) {\n    // Note: must report \"prototype\" in proxy when we are callable.\n    // (We can return the wrong value from \"get\" handler though.)\n    let objHasKey = Reflect.has(jsobj, jskey);\n    if (objHasKey) {\n      return (!!1);\n    }\n    // python_hasattr will crash when given a Symbol.\n    if (typeof jskey === \"symbol\") {\n      return (!!0);\n    }\n    return python_hasattr(jsobj, jskey);\n  },\n  get(jsobj, jskey) {\n    // Preference order:\n    // 1. stuff from Javascript\n    // 2. the result of Python getattr\n\n    // Javascript lookup -- make sure not to let symbols through, passing them\n    // to python_getattr will crash.\n    if (jskey in jsobj || typeof jskey === \"symbol\") {\n      return Reflect.get(jsobj, jskey);\n    }\n    // If keys start with $ remove the $. User can use initial $ to\n    // unambiguously ask for a key on the Python object\n    if (jskey.startsWith(\"$\")) {\n      jskey = jskey.slice(1);\n    }\n    // 2. The result of getattr\n    let idresult = python_getattr(jsobj, jskey);\n    if (idresult !== 0) {\n      return Module.hiwire.pop_value(idresult);\n    }\n  },\n  set(jsobj, jskey, jsval) {\n    // We're only willing to set properties on the python object, throw an\n    // error if user tries to write over any key of type 1. things we have to\n    // return to avoid making Javascript angry\n    if (typeof jskey === \"symbol\") {\n      throw new TypeError(`Cannot set read only field '${jskey.description}'`);\n    }\n    // Again this is a funny looking conditional, I found it as the result of\n    // a lengthy search for something that worked right.\n    let descr = Object.getOwnPropertyDescriptor(jsobj, jskey);\n    if (descr && !descr.writable) {\n      throw new TypeError(`Cannot set read only field '${jskey}'`);\n    }\n    python_setattr(jsobj, jskey, jsval);\n    return (!!1);\n  },\n  deleteProperty(jsobj, jskey) {\n    // We're only willing to delete properties on the python object, throw an\n    // error if user tries to write over any key of type 1. things we have to\n    // return to avoid making Javascript angry\n    if (typeof jskey === \"symbol\") {\n      throw new TypeError(\n        `Cannot delete read only field '${jskey.description}'`\n      );\n    }\n    let descr = Object.getOwnPropertyDescriptor(jsobj, jskey);\n    if (descr && !descr.writable) {\n      throw new TypeError(`Cannot delete read only field '${jskey}'`);\n    }\n    python_delattr(jsobj, jskey);\n    // Must return \"false\" if \"jskey\" is a nonconfigurable own property.\n    // Otherwise Javascript will throw a TypeError.\n    return !descr || descr.configurable;\n  },\n  ownKeys(jsobj) {\n    let ptrobj = _getPtr(jsobj);\n    let idresult;\n    try {\n      idresult = Module.__pyproxy_ownKeys(ptrobj);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n    if (idresult === 0) {\n      Module._pythonexc2js();\n    }\n    let result = Module.hiwire.pop_value(idresult);\n    result.push(...Reflect.ownKeys(jsobj));\n    return result;\n  },\n  apply(jsobj, jsthis, jsargs) {\n    return jsobj.apply(jsthis, jsargs);\n  },\n};\n\n/**\n * @typedef {PyProxy & Promise<Py2JsResult>} PyProxyAwaitable\n */\n\n/**\n * The Promise / javascript awaitable API.\n * @private\n */\nclass PyProxyAwaitableMethods {\n  /**\n   * This wraps __pyproxy_ensure_future and makes a function that converts a\n   * Python awaitable to a promise, scheduling the awaitable on the Python\n   * event loop if necessary.\n   * @private\n   */\n  _ensure_future() {\n    let ptrobj = _getPtr(this);\n    let resolveHandle;\n    let rejectHandle;\n    let promise = new Promise((resolve, reject) => {\n      resolveHandle = resolve;\n      rejectHandle = reject;\n    });\n    let resolve_handle_id = Module.hiwire.new_value(resolveHandle);\n    let reject_handle_id = Module.hiwire.new_value(rejectHandle);\n    let errcode;\n    try {\n      errcode = Module.__pyproxy_ensure_future(\n        ptrobj,\n        resolve_handle_id,\n        reject_handle_id\n      );\n    } catch (e) {\n      Module.fatal_error(e);\n    } finally {\n      Module.hiwire.decref(reject_handle_id);\n      Module.hiwire.decref(resolve_handle_id);\n    }\n    if (errcode === -1) {\n      Module._pythonexc2js();\n    }\n    return promise;\n  }\n  /**\n   * Runs ``asyncio.ensure_future(awaitable)``, executes\n   * ``onFulfilled(result)`` when the ``Future`` resolves successfully,\n   * executes ``onRejected(error)`` when the ``Future`` fails. Will be used\n   * implictly by ``await obj``.\n   *\n   * See the documentation for\n   * `Promise.then\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then>`_\n   *\n   * Present only if the proxied Python object is `awaitable\n   * <https://docs.python.org/3/library/asyncio-task.html?highlight=awaitable#awaitables>`_.\n   *\n   * @param {Function} onFulfilled A handler called with the result as an\n   * argument if the awaitable succeeds.\n   * @param {Function} onRejected A handler called with the error as an\n   * argument if the awaitable fails.\n   * @returns {Promise} The resulting Promise.\n   */\n  then(onFulfilled, onRejected) {\n    let promise = this._ensure_future();\n    return promise.then(onFulfilled, onRejected);\n  }\n  /**\n   * Runs ``asyncio.ensure_future(awaitable)`` and executes\n   * ``onRejected(error)`` if the future fails.\n   *\n   * See the documentation for\n   * `Promise.catch\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch>`_.\n   *\n   * Present only if the proxied Python object is `awaitable\n   * <https://docs.python.org/3/library/asyncio-task.html?highlight=awaitable#awaitables>`_.\n   *\n   * @param {Function} onRejected A handler called with the error as an\n   * argument if the awaitable fails.\n   * @returns {Promise} The resulting Promise.\n   */\n  catch(onRejected) {\n    let promise = this._ensure_future();\n    return promise.catch(onRejected);\n  }\n  /**\n   * Runs ``asyncio.ensure_future(awaitable)`` and executes\n   * ``onFinally(error)`` when the future resolves.\n   *\n   * See the documentation for\n   * `Promise.finally\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally>`_.\n   *\n   * Present only if the proxied Python object is `awaitable\n   * <https://docs.python.org/3/library/asyncio-task.html?highlight=awaitable#awaitables>`_.\n   *\n   *\n   * @param {Function} onFinally A handler that is called with zero arguments\n   * when the awaitable resolves.\n   * @returns {Promise} A Promise that resolves or rejects with the same\n   * result as the original Promise, but only after executing the\n   * ``onFinally`` handler.\n   */\n  finally(onFinally) {\n    let promise = this._ensure_future();\n    return promise.finally(onFinally);\n  }\n}\n\n/**\n * @typedef { PyProxy & PyProxyCallableMethods & ((...args : any[]) => Py2JsResult) } PyProxyCallable\n */\nclass PyProxyCallableMethods {\n  apply(jsthis, jsargs) {\n    return Module.callPyObject(_getPtr(this), ...jsargs);\n  }\n  call(jsthis, ...jsargs) {\n    return Module.callPyObject(_getPtr(this), ...jsargs);\n  }\n  /**\n   * Call the function with key word arguments.\n   * The last argument must be an object with the keyword arguments.\n   */\n  callKwargs(...jsargs) {\n    if (jsargs.length === 0) {\n      throw new TypeError(\n        \"callKwargs requires at least one argument (the key word argument object)\"\n      );\n    }\n    let kwargs = jsargs[jsargs.length - 1];\n    if (\n      kwargs.constructor !== undefined &&\n      kwargs.constructor.name !== \"Object\"\n    ) {\n      throw new TypeError(\"kwargs argument is not an object\");\n    }\n    return Module.callPyObjectKwargs(_getPtr(this), ...jsargs);\n  }\n}\nPyProxyCallableMethods.prototype.prototype = Function.prototype;\n\nlet type_to_array_map = new Map([\n  [\"i8\", Int8Array],\n  [\"u8\", Uint8Array],\n  [\"u8clamped\", Uint8ClampedArray],\n  [\"i16\", Int16Array],\n  [\"u16\", Uint16Array],\n  [\"i32\", Int32Array],\n  [\"u32\", Uint32Array],\n  [\"i32\", Int32Array],\n  [\"u32\", Uint32Array],\n  // if these aren't available, will be globalThis.BigInt64Array will be\n  // undefined rather than raising a ReferenceError.\n  [\"i64\", globalThis.BigInt64Array],\n  [\"u64\", globalThis.BigUint64Array],\n  [\"f32\", Float32Array],\n  [\"f64\", Float64Array],\n  [\"dataview\", DataView],\n]);\n\n/**\n * @typedef {PyProxy & PyProxyBufferMethods} PyProxyBuffer\n */\nclass PyProxyBufferMethods {\n  /**\n   * Get a view of the buffer data which is usable from Javascript. No copy is\n   * ever performed.\n   *\n   * Present only if the proxied Python object supports the `Python Buffer\n   * Protocol <https://docs.python.org/3/c-api/buffer.html>`_.\n   *\n   * We do not support suboffsets, if the buffer requires suboffsets we will\n   * throw an error. Javascript nd array libraries can't handle suboffsets\n   * anyways. In this case, you should use the :any:`toJs` api or copy the\n   * buffer to one that doesn't use suboffets (using e.g.,\n   * `numpy.ascontiguousarray\n   * <https://numpy.org/doc/stable/reference/generated/numpy.ascontiguousarray.html>`_).\n   *\n   * If the buffer stores big endian data or half floats, this function will\n   * fail without an explicit type argument. For big endian data you can use\n   * ``toJs``. `DataViews\n   * <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView>`_\n   * have support for big endian data, so you might want to pass\n   * ``'dataview'`` as the type argument in that case.\n   *\n   * @param {string=} [type] The type of the :any:`PyBuffer.data <pyodide.PyBuffer.data>` field in the\n   * output. Should be one of: ``\"i8\"``, ``\"u8\"``, ``\"u8clamped\"``, ``\"i16\"``,\n   * ``\"u16\"``, ``\"i32\"``, ``\"u32\"``, ``\"i32\"``, ``\"u32\"``, ``\"i64\"``,\n   * ``\"u64\"``, ``\"f32\"``, ``\"f64``, or ``\"dataview\"``. This argument is\n   * optional, if absent ``getBuffer`` will try to determine the appropriate\n   * output type based on the buffer `format string\n   * <https://docs.python.org/3/library/struct.html#format-strings>`_.\n   * @returns {PyBuffer} :any:`PyBuffer <pyodide.PyBuffer>`\n   */\n  getBuffer(type) {\n    let ArrayType = undefined;\n    if (type) {\n      ArrayType = type_to_array_map.get(type);\n      if (ArrayType === undefined) {\n        throw new Error(`Unknown type ${type}`);\n      }\n    }\n    let this_ptr = _getPtr(this);\n    let buffer_struct_ptr;\n    try {\n      buffer_struct_ptr = Module.__pyproxy_get_buffer(this_ptr);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n    if (buffer_struct_ptr === 0) {\n      Module._pythonexc2js();\n    }\n\n    let HEAP32 = Module.HEAP32;\n    // This has to match the order of the fields in buffer_struct\n    let cur_ptr = buffer_struct_ptr / 4;\n\n    let startByteOffset = HEAP32[cur_ptr++];\n    let minByteOffset = HEAP32[cur_ptr++];\n    let maxByteOffset = HEAP32[cur_ptr++];\n\n    let readonly = !!HEAP32[cur_ptr++];\n    let format_ptr = HEAP32[cur_ptr++];\n    let itemsize = HEAP32[cur_ptr++];\n    let shape = Module.hiwire.pop_value(HEAP32[cur_ptr++]);\n    let strides = Module.hiwire.pop_value(HEAP32[cur_ptr++]);\n\n    let view_ptr = HEAP32[cur_ptr++];\n    let c_contiguous = !!HEAP32[cur_ptr++];\n    let f_contiguous = !!HEAP32[cur_ptr++];\n\n    let format = Module.UTF8ToString(format_ptr);\n    try {\n      Module._PyMem_Free(buffer_struct_ptr);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n\n    let success = (!!0);\n    try {\n      let bigEndian = (!!0);\n      if (ArrayType === undefined) {\n        [ArrayType, bigEndian] = Module.processBufferFormatString(\n          format,\n          \" In this case, you can pass an explicit type argument.\"\n        );\n      }\n      let alignment = parseInt(ArrayType.name.replace(/[^0-9]/g, \"\")) / 8 || 1;\n      if (bigEndian && alignment > 1) {\n        throw new Error(\n          \"Javascript has no native support for big endian buffers. \" +\n            \"In this case, you can pass an explicit type argument. \" +\n            \"For instance, `getBuffer('dataview')` will return a `DataView`\" +\n            \"which has native support for reading big endian data. \" +\n            \"Alternatively, toJs will automatically convert the buffer \" +\n            \"to little endian.\"\n        );\n      }\n      let numBytes = maxByteOffset - minByteOffset;\n      if (\n        numBytes !== 0 &&\n        (startByteOffset % alignment !== 0 ||\n          minByteOffset % alignment !== 0 ||\n          maxByteOffset % alignment !== 0)\n      ) {\n        throw new Error(\n          `Buffer does not have valid alignment for a ${ArrayType.name}`\n        );\n      }\n      let numEntries = numBytes / alignment;\n      let offset = (startByteOffset - minByteOffset) / alignment;\n      let data;\n      if (numBytes === 0) {\n        data = new ArrayType();\n      } else {\n        data = new ArrayType(HEAP32.buffer, minByteOffset, numEntries);\n      }\n      for (let i of strides.keys()) {\n        strides[i] /= alignment;\n      }\n\n      success = (!!1);\n      let result = Object.create(\n        PyBuffer.prototype,\n        Object.getOwnPropertyDescriptors({\n          offset,\n          readonly,\n          format,\n          itemsize,\n          ndim: shape.length,\n          nbytes: numBytes,\n          shape,\n          strides,\n          data,\n          c_contiguous,\n          f_contiguous,\n          _view_ptr: view_ptr,\n          _released: (!!0),\n        })\n      );\n      // Module.bufferFinalizationRegistry.register(result, view_ptr, result);\n      return result;\n    } finally {\n      if (!success) {\n        try {\n          Module._PyBuffer_Release(view_ptr);\n          Module._PyMem_Free(view_ptr);\n        } catch (e) {\n          Module.fatal_error(e);\n        }\n      }\n    }\n  }\n}\n\n/**\n * @typedef {Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array} TypedArray;\n */\n\n/**\n * A class to allow access to a Python data buffers from Javascript. These are\n * produced by :any:`PyProxy.getBuffer` and cannot be constructed directly.\n * When you are done, release it with the :any:`release <PyBuffer.release>`\n * method.  See\n * `Python buffer protocol documentation\n * <https://docs.python.org/3/c-api/buffer.html>`_ for more information.\n *\n * To find the element ``x[a_1, ..., a_n]``, you could use the following code:\n *\n * .. code-block:: js\n *\n *    function multiIndexToIndex(pybuff, multiIndex){\n *       if(multindex.length !==pybuff.ndim){\n *          throw new Error(\"Wrong length index\");\n *       }\n *       let idx = pybuff.offset;\n *       for(let i = 0; i < pybuff.ndim; i++){\n *          if(multiIndex[i] < 0){\n *             multiIndex[i] = pybuff.shape[i] - multiIndex[i];\n *          }\n *          if(multiIndex[i] < 0 || multiIndex[i] >= pybuff.shape[i]){\n *             throw new Error(\"Index out of range\");\n *          }\n *          idx += multiIndex[i] * pybuff.stride[i];\n *       }\n *       return idx;\n *    }\n *    console.log(\"entry is\", pybuff.data[multiIndexToIndex(pybuff, [2, 0, -1])]);\n *\n * .. admonition:: Contiguity\n *    :class: warning\n *\n *    If the buffer is not contiguous, the ``data`` TypedArray will contain\n *    data that is not part of the buffer. Modifying this data may lead to\n *    undefined behavior.\n *\n * .. admonition:: Readonly buffers\n *    :class: warning\n *\n *    If ``buffer.readonly`` is ``true``, you should not modify the buffer.\n *    Modifying a readonly buffer may lead to undefined behavior.\n *\n * .. admonition:: Converting between TypedArray types\n *    :class: warning\n *\n *    The following naive code to change the type of a typed array does not\n *    work:\n *\n *    .. code-block:: js\n *\n *        // Incorrectly convert a TypedArray.\n *        // Produces a Uint16Array that points to the entire WASM memory!\n *        let myarray = new Uint16Array(buffer.data.buffer);\n *\n *    Instead, if you want to convert the output TypedArray, you need to say:\n *\n *    .. code-block:: js\n *\n *        // Correctly convert a TypedArray.\n *        let myarray = new Uint16Array(\n *            buffer.data.buffer,\n *            buffer.data.byteOffset,\n *            buffer.data.byteLength\n *        );\n */\nexport class PyBuffer {\n  constructor() {\n    /**\n     * The offset of the first entry of the array. For instance if our array\n     * is 3d, then you will find ``array[0,0,0]`` at\n     * ``pybuf.data[pybuf.offset]``\n     * @type {number}\n     */\n    this.offset;\n\n    /**\n     * If the data is readonly, you should not modify it. There is no way\n     * for us to enforce this, but it may cause very weird behavior.\n     * @type {boolean}\n     */\n    this.readonly;\n\n    /**\n     * The format string for the buffer. See `the Python documentation on\n     * format strings\n     * <https://docs.python.org/3/library/struct.html#format-strings>`_.\n     * @type {string}\n     */\n    this.format;\n\n    /**\n     * How large is each entry (in bytes)?\n     * @type {number}\n     */\n    this.itemsize;\n\n    /**\n     * The number of dimensions of the buffer. If ``ndim`` is 0, the buffer\n     * represents a single scalar or struct. Otherwise, it represents an\n     * array.\n     * @type {number}\n     */\n    this.ndim;\n\n    /**\n     * The total number of bytes the buffer takes up. This is equal to\n     * ``buff.data.byteLength``.\n     * @type {number}\n     */\n    this.nbytes;\n\n    /**\n     * The shape of the buffer, that is how long it is in each dimension.\n     * The length will be equal to ``ndim``. For instance, a 2x3x4 array\n     * would have shape ``[2, 3, 4]``.\n     * @type {number[]}\n     */\n    this.shape;\n\n    /**\n     * An array of of length ``ndim`` giving the number of elements to skip\n     * to get to a new element in each dimension. See the example definition\n     * of a ``multiIndexToIndex`` function above.\n     * @type {number[]}\n     */\n    this.strides;\n\n    /**\n     * The actual data. A typed array of an appropriate size backed by a\n     * segment of the WASM memory.\n     *\n     * The ``type`` argument of :any:`PyProxy.getBuffer`\n     * determines which sort of ``TypedArray`` this is. By default\n     * :any:`PyProxy.getBuffer` will look at the format string to determine the most\n     * appropriate option.\n     * @type {TypedArray}\n     */\n    this.data;\n\n    /**\n     * Is it C contiguous?\n     * @type {boolean}\n     */\n    this.c_contiguous;\n\n    /**\n     * Is it Fortran contiguous?\n     * @type {boolean}\n     */\n    this.f_contiguous;\n    throw new TypeError(\"PyBuffer is not a constructor\");\n  }\n\n  /**\n   * Release the buffer. This allows the memory to be reclaimed.\n   */\n  release() {\n    if (this._released) {\n      return;\n    }\n    // Module.bufferFinalizationRegistry.unregister(this);\n    try {\n      Module._PyBuffer_Release(this._view_ptr);\n      Module._PyMem_Free(this._view_ptr);\n    } catch (e) {\n      Module.fatal_error(e);\n    }\n    this._released = (!!1);\n    this.data = null;\n  }\n}\n\n// A special proxy that we use to wrap pyodide.globals to allow property\n// access like `pyodide.globals.x`.\nlet globalsPropertyAccessWarned = (!!0);\nlet globalsPropertyAccessWarningMsg =\n  \"Access to pyodide.globals via pyodide.globals.key is deprecated and \" +\n  \"will be removed in version 0.18.0. Use pyodide.globals.get('key'), \" +\n  \"pyodide.globals.set('key', value), pyodide.globals.delete('key') instead.\";\nlet NamespaceProxyHandlers = {\n  has(obj, key) {\n    return Reflect.has(obj, key) || obj.has(key);\n  },\n  get(obj, key) {\n    if (Reflect.has(obj, key)) {\n      return Reflect.get(obj, key);\n    }\n    let result = obj.get(key);\n    if (!globalsPropertyAccessWarned && result !== undefined) {\n      console.warn(globalsPropertyAccessWarningMsg);\n      globalsPropertyAccessWarned = (!!1);\n    }\n    return result;\n  },\n  set(obj, key, value) {\n    if (Reflect.has(obj, key)) {\n      throw new Error(`Cannot set read only field ${key}`);\n    }\n    if (!globalsPropertyAccessWarned) {\n      globalsPropertyAccessWarned = (!!1);\n      console.warn(globalsPropertyAccessWarningMsg);\n    }\n    obj.set(key, value);\n  },\n  ownKeys(obj) {\n    let result = new Set(Reflect.ownKeys(obj));\n    let iter = obj.keys();\n    for (let key of iter) {\n      result.add(key);\n    }\n    iter.destroy();\n    return Array.from(result);\n  },\n};\n\nexport function wrapNamespace(ns) {\n  return new Proxy(ns, NamespaceProxyHandlers);\n}\n","import { Module } from \"./module\";\nimport { loadPackage, loadedPackages } from \"./load-pyodide\";\nimport { isPyProxy, PyBuffer } from \"./pyproxy.gen\";\nexport { loadPackage, loadedPackages, isPyProxy };\n\n/**\n * @typedef {import('./pyproxy.gen').Py2JsResult} Py2JsResult\n * @typedef {import('./pyproxy.gen').PyProxy} PyProxy\n * @typedef {import('./pyproxy.gen').TypedArray} TypedArray\n */\n\n/**\n * An alias to the Python :py:mod:`pyodide` package.\n *\n * You can use this to call functions defined in the Pyodide Python package\n * from Javascript.\n *\n * @type {PyProxy}\n */\nlet pyodide_py = {}; // actually defined in runPythonSimple in loadPyodide (see pyodide.js)\n\n/**\n *\n * An alias to the global Python namespace.\n *\n * For example, to access a variable called ``foo`` in the Python global\n * scope, use ``pyodide.globals.get(\"foo\")``\n *\n * @type {PyProxy}\n */\nlet globals = {}; // actually defined in runPythonSimple in loadPyodide (see pyodide.js)\n\n/**\n * A Javascript error caused by a Python exception.\n *\n * In order to reduce the risk of large memory leaks, the ``PythonError``\n * contains no reference to the Python exception that caused it. You can find\n * the actual Python exception that caused this error as `sys.last_value\n * <https://docs.python.org/3/library/sys.html#sys.last_value>`_.\n *\n * See :ref:`type-translations-errors` for more information.\n *\n * .. admonition:: Avoid Stack Frames\n *    :class: warning\n *\n *    If you make a :any:`PyProxy` of ``sys.last_value``, you should be\n *    especially careful to :any:`destroy() <PyProxy.destroy>` it when you are\n *    done. You may leak a large amount of memory including the local\n *    variables of all the stack frames in the traceback if you don't. The\n *    easiest way is to only handle the exception in Python.\n *\n * @class\n */\nexport class PythonError {\n  // actually defined in error_handling.c. TODO: would be good to move this\n  // documentation and the definition of PythonError to error_handling.js\n  constructor() {\n    /**\n     * The Python traceback.\n     * @type {string}\n     */\n    this.message;\n  }\n}\n\n/**\n *\n * The Pyodide version.\n *\n * It can be either the exact release version (e.g. ``0.1.0``), or\n * the latest release version followed by the number of commits since, and\n * the git hash of the current commit (e.g. ``0.1.0-1-bd84646``).\n *\n * @type {string}\n */\nexport let version = \"\"; // actually defined in runPythonSimple in loadPyodide (see pyodide.js)\n\n/**\n * Runs a string of Python code from Javascript.\n *\n * The last part of the string may be an expression, in which case, its value\n * is returned.\n *\n * @param {string} code Python code to evaluate\n * @param {PyProxy} globals An optional Python dictionary to use as the globals.\n *        Defaults to :any:`pyodide.globals`. Uses the Python API\n *        :any:`pyodide.eval_code` to evaluate the code.\n * @returns {Py2JsResult} The result of the Python code translated to Javascript. See the\n *          documentation for :any:`pyodide.eval_code` for more info.\n */\nexport function runPython(code, globals = Module.globals) {\n  let eval_code = Module.pyodide_py.eval_code;\n  try {\n    return eval_code(code, globals);\n  } finally {\n    eval_code.destroy();\n  }\n}\nModule.runPython = runPython;\n\n/**\n * @callback LogFn\n * @param {string} msg\n * @returns {void}\n * @private\n */\n\n/**\n * Inspect a Python code chunk and use :js:func:`pyodide.loadPackage` to\n * install any known packages that the code chunk imports. Uses the Python API\n * :func:`pyodide.find\\_imports` to inspect the code.\n *\n * For example, given the following code as input\n *\n * .. code-block:: python\n *\n *    import numpy as np x = np.array([1, 2, 3])\n *\n * :js:func:`loadPackagesFromImports` will call\n * ``pyodide.loadPackage(['numpy'])``. See also :js:func:`runPythonAsync`.\n *\n * @param {string} code The code to inspect.\n * @param {LogFn=} messageCallback The ``messageCallback`` argument of\n * :any:`pyodide.loadPackage` (optional).\n * @param {LogFn=} errorCallback The ``errorCallback`` argument of\n * :any:`pyodide.loadPackage` (optional).\n * @async\n */\nexport async function loadPackagesFromImports(\n  code,\n  messageCallback,\n  errorCallback\n) {\n  let find_imports = Module.pyodide_py.find_imports;\n  let imports;\n  let pyimports;\n  try {\n    pyimports = find_imports(code);\n    imports = pyimports.toJs();\n  } finally {\n    find_imports.destroy();\n    pyimports && pyimports.destroy();\n  }\n  if (imports.length === 0) {\n    return;\n  }\n  let packageNames = Module.packages.import_name_to_package_name;\n  let packages = new Set();\n  for (let name of imports) {\n    if (name in packageNames) {\n      packages.add(packageNames[name]);\n    }\n  }\n  if (packages.size) {\n    await loadPackage(\n      Array.from(packages.keys()),\n      messageCallback,\n      errorCallback\n    );\n  }\n}\n\n/**\n * Access a Python object in the global namespace from Javascript.\n *\n * @deprecated This function will be removed in version 0.18.0. Use\n *    :any:`pyodide.globals.get('key') <pyodide.globals>` instead.\n *\n * @param {string} name Python variable name\n * @returns {Py2JsResult} The Python object translated to Javascript.\n */\nexport function pyimport(name) {\n  console.warn(\n    \"Access to the Python global namespace via pyodide.pyimport is deprecated and \" +\n      \"will be removed in version 0.18.0. Use pyodide.globals.get('key') instead.\"\n  );\n  return Module.globals.get(name);\n}\n/**\n * Runs Python code using `PyCF_ALLOW_TOP_LEVEL_AWAIT\n * <https://docs.python.org/3/library/ast.html?highlight=pycf_allow_top_level_await#ast.PyCF_ALLOW_TOP_LEVEL_AWAIT>`_.\n *\n * For example:\n *\n * .. code-block:: pyodide\n *\n *    let result = await pyodide.runPythonAsync(`\n *        from js import fetch\n *        response = await fetch(\"./packages.json\")\n *        packages = await response.json()\n *        # If final statement is an expression, its value is returned to\n * Javascript len(packages.dependencies.object_keys())\n *    `);\n *    console.log(result); // 72\n *\n * @param {string} code Python code to evaluate\n * @returns {Py2JsResult} The result of the Python code translated to Javascript.\n * @async\n */\nexport async function runPythonAsync(code) {\n  let eval_code_async = Module.pyodide_py.eval_code_async;\n  let coroutine = eval_code_async(code, Module.globals);\n  try {\n    let result = await coroutine;\n    return result;\n  } finally {\n    eval_code_async.destroy();\n    coroutine.destroy();\n  }\n}\nModule.runPythonAsync = runPythonAsync;\n\n/**\n * Registers the Javascript object ``module`` as a Javascript module named\n * ``name``. This module can then be imported from Python using the standard\n * Python import system. If another module by the same name has already been\n * imported, this won't have much effect unless you also delete the imported\n * module from ``sys.modules``. This calls the ``pyodide_py`` API\n * :func:`pyodide.register_js_module`.\n *\n * @param {string} name Name of the Javascript module to add\n * @param {object} module Javascript object backing the module\n */\nexport function registerJsModule(name, module) {\n  let register_js_module = Module.pyodide_py.register_js_module;\n  try {\n    register_js_module(name, module);\n  } finally {\n    register_js_module.destroy();\n  }\n}\n\n/**\n * Tell Pyodide about Comlink.\n * Necessary to enable importing Comlink proxies into Python.\n */\nexport function registerComlink(Comlink) {\n  Module._Comlink = Comlink;\n}\n\n/**\n * Unregisters a Javascript module with given name that has been previously\n * registered with :js:func:`pyodide.registerJsModule` or\n * :func:`pyodide.register_js_module`. If a Javascript module with that name\n * does not already exist, will throw an error. Note that if the module has\n * already been imported, this won't have much effect unless you also delete\n * the imported module from ``sys.modules``. This calls the ``pyodide_py`` API\n * :func:`pyodide.unregister_js_module`.\n *\n * @param {string} name Name of the Javascript module to remove\n */\nexport function unregisterJsModule(name) {\n  let unregister_js_module = Module.pyodide_py.unregister_js_module;\n  try {\n    unregister_js_module(name);\n  } finally {\n    unregister_js_module.destroy();\n  }\n}\n\n/**\n * Convert the Javascript object to a Python object as best as possible.\n *\n * This is similar to :any:`JsProxy.to_py` but for use from Javascript. If the\n * object is immutable or a :any:`PyProxy`, it will be returned unchanged. If\n * the object cannot be converted into Python, it will be returned unchanged.\n *\n * See :ref:`type-translations-jsproxy-to-py` for more information.\n *\n * @param {*} obj\n * @param {number} depth Optional argument to limit the depth of the\n * conversion.\n * @returns {PyProxy} The object converted to Python.\n */\nexport function toPy(obj, depth = -1) {\n  // No point in converting these, it'd be dumb to proxy them so they'd just\n  // get converted back by `js2python` at the end\n  switch (typeof obj) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n    case \"bigint\":\n    case \"undefined\":\n      return obj;\n  }\n  if (!obj || Module.isPyProxy(obj)) {\n    return obj;\n  }\n  let obj_id = 0;\n  let py_result = 0;\n  let result = 0;\n  try {\n    obj_id = Module.hiwire.new_value(obj);\n    py_result = Module.__js2python_convert(obj_id, new Map(), depth);\n    if (py_result === 0) {\n      Module._pythonexc2js();\n    }\n    if (Module._JsProxy_Check(py_result)) {\n      // Oops, just created a JsProxy. Return the original object.\n      return obj;\n      // return Module.pyproxy_new(py_result);\n    }\n    result = Module._python2js(py_result);\n    if (result === 0) {\n      Module._pythonexc2js();\n    }\n  } finally {\n    Module.hiwire.decref(obj_id);\n    Module._Py_DecRef(py_result);\n  }\n  return Module.hiwire.pop_value(result);\n}\n\n/**\n * @param {TypedArray} interrupt_buffer\n */\nfunction setInterruptBuffer(interrupt_buffer) {}\nsetInterruptBuffer = Module.setInterruptBuffer;\nexport { setInterruptBuffer };\n\nexport function makePublicAPI() {\n  let namespace = {\n    globals,\n    pyodide_py,\n    version,\n    loadPackage,\n    loadPackagesFromImports,\n    loadedPackages,\n    isPyProxy,\n    pyimport,\n    runPython,\n    runPythonAsync,\n    registerJsModule,\n    unregisterJsModule,\n    setInterruptBuffer,\n    toPy,\n    registerComlink,\n    PythonError,\n    PyBuffer,\n  };\n  namespace._module = Module; // @private\n  Module.public_api = namespace;\n  return namespace;\n}\n","/**\n * The main bootstrap code for loading pyodide.\n */\nimport { Module } from \"./module\";\nimport {\n  loadScript,\n  initializePackageIndex,\n  loadPackage,\n} from \"./load-pyodide\";\nimport { makePublicAPI, registerJsModule } from \"./api\";\nimport \"./pyproxy.gen\";\n\nimport { wrapNamespace } from \"./pyproxy.gen\";\n\n/**\n * @typedef {import('./pyproxy.gen').PyProxy} PyProxy\n * @typedef {import('./pyproxy.gen').PyProxyWithLength} PyProxyWithLength\n * @typedef {import('./pyproxy.gen').PyProxyWithGet} PyProxyWithGet\n * @typedef {import('./pyproxy.gen').PyProxyWithSet} PyProxyWithSet\n * @typedef {import('./pyproxy.gen').PyProxyWithHas} PyProxyWithHas\n * @typedef {import('./pyproxy.gen').PyProxyIterable} PyProxyIterable\n * @typedef {import('./pyproxy.gen').PyProxyIterator} PyProxyIterator\n * @typedef {import('./pyproxy.gen').PyProxyAwaitable} PyProxyAwaitable\n * @typedef {import('./pyproxy.gen').PyProxyBuffer} PyProxyBuffer\n * @typedef {import('./pyproxy.gen').PyProxyCallable} PyProxyCallable\n *\n * @typedef {import('./pyproxy.gen').Py2JsResult} Py2JsResult\n *\n * @typedef {import('./pyproxy.gen').TypedArray} TypedArray\n * @typedef {import('./pyproxy.gen').PyBuffer} PyBuffer\n */\n\n/**\n * Dump the Python traceback to the browser console.\n *\n * @private\n */\nModule.dump_traceback = function () {\n  let fd_stdout = 1;\n  Module.__Py_DumpTraceback(fd_stdout, Module._PyGILState_GetThisThreadState());\n};\n\nlet fatal_error_occurred = false;\n/**\n * Signal a fatal error.\n *\n * Dumps the Python traceback, shows a Javascript traceback, and prints a clear\n * message indicating a fatal error. It then dummies out the public API so that\n * further attempts to use Pyodide will clearly indicate that Pyodide has failed\n * and can no longer be used. pyodide._module is left accessible and it is\n * possible to continue using Pyodide for debugging purposes if desired.\n *\n * @argument e {Error} The cause of the fatal error.\n * @private\n */\nModule.fatal_error = function (e) {\n  if (fatal_error_occurred) {\n    console.error(\"Recursive call to fatal_error. Inner error was:\");\n    console.error(e);\n    return;\n  }\n  fatal_error_occurred = true;\n  console.error(\n    \"Pyodide has suffered a fatal error. Please report this to the Pyodide maintainers.\"\n  );\n  console.error(\"The cause of the fatal error was:\");\n  console.error(e);\n  try {\n    Module.dump_traceback();\n    for (let key of Object.keys(Module.public_api)) {\n      if (key.startsWith(\"_\") || key === \"version\") {\n        continue;\n      }\n      Object.defineProperty(Module.public_api, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => {\n          throw new Error(\n            \"Pyodide already fatally failed and can no longer be used.\"\n          );\n        },\n      });\n    }\n    if (Module.on_fatal) {\n      Module.on_fatal(e);\n    }\n  } catch (err2) {\n    console.error(\"Another error occurred while handling the fatal error:\");\n    console.error(err2);\n  }\n  throw e;\n};\n\n/**\n * Run Python code in the simplest way possible. The primary purpose of this\n * method is for bootstrapping. It is also useful for debugging: If the Python\n * interpreter is initialized successfully then it should be possible to use\n * this method to run Python code even if everything else in the Pyodide\n * `core` module fails.\n *\n * The differences are:\n *    1. `runPythonSimple` doesn't return anything (and so won't leak\n *        PyProxies)\n *    2. `runPythonSimple` doesn't require access to any state on the\n *       Javascript `pyodide` module.\n *    3. `runPython` uses `pyodide.eval_code`, whereas `runPythonSimple` uses\n *       `PyRun_String` which is the C API for `eval` / `exec`.\n *    4. `runPythonSimple` runs with `globals` a separate dict which is called\n *       `init_dict` (keeps global state private)\n *    5. `runPythonSimple` doesn't dedent the argument\n *\n * When `core` initialization is completed, the globals for `runPythonSimple`\n * is made available as `Module.init_dict`.\n *\n * @private\n */\nModule.runPythonSimple = function (code) {\n  let code_c_string = Module.stringToNewUTF8(code);\n  let errcode;\n  try {\n    errcode = Module._run_python_simple_inner(code_c_string);\n  } catch (e) {\n    Module.fatal_error(e);\n  } finally {\n    Module._free(code_c_string);\n  }\n  if (errcode === -1) {\n    Module._pythonexc2js();\n  }\n};\n\n/**\n * The Javascript/Wasm call stack is too small to handle the default Python call\n * stack limit of 1000 frames. Here, we determine the Javascript call stack\n * depth available, and then divide by 50 (determined heuristically) to set the\n * maximum Python call stack depth.\n *\n * @private\n */\nfunction fixRecursionLimit() {\n  let depth = 0;\n  function recurse() {\n    depth += 1;\n    recurse();\n  }\n  try {\n    recurse();\n  } catch (err) {}\n\n  let recursionLimit = Math.min(depth / 50, 400);\n  Module.runPythonSimple(\n    `import sys; sys.setrecursionlimit(int(${recursionLimit}))`\n  );\n}\n\n/**\n * Load the main Pyodide wasm module and initialize it.\n *\n * Only one copy of Pyodide can be loaded in a given Javascript global scope\n * because Pyodide uses global variables to load packages. If an attempt is made\n * to load a second copy of Pyodide, :any:`loadPyodide` will throw an error.\n * (This can be fixed once `Firefox adopts support for ES6 modules in webworkers\n * <https://bugzilla.mozilla.org/show_bug.cgi?id=1247687>`_.)\n *\n * @param {{ indexURL : string, fullStdLib? : boolean = true }} config\n * @param {string} config.indexURL - The URL from which Pyodide will load\n * packages\n * @param {boolean} config.fullStdLib - Load the full Python standard library.\n * Setting this to false excludes following modules: distutils.\n * Default: true\n * @returns The :ref:`js-api-pyodide` module.\n * @memberof globalThis\n * @async\n */\nexport async function loadPyodide(config) {\n  const default_config = { fullStdLib: true };\n  config = Object.assign(default_config, config);\n  if (globalThis.__pyodide_module) {\n    if (globalThis.languagePluginURL) {\n      throw new Error(\n        \"Pyodide is already loading because languagePluginURL is defined.\"\n      );\n    } else {\n      throw new Error(\"Pyodide is already loading.\");\n    }\n  }\n  // A global \"mount point\" for the package loaders to talk to pyodide\n  // See \"--export-name=__pyodide_module\" in buildpkg.py\n  globalThis.__pyodide_module = Module;\n  loadPyodide.inProgress = true;\n  // Note: PYODIDE_BASE_URL is an environment variable replaced in\n  // in this template in the Makefile. It's recommended to always set\n  // indexURL in any case.\n  if (!config.indexURL) {\n    throw new Error(\"Please provide indexURL parameter to loadPyodide\");\n  }\n  let baseURL = config.indexURL;\n  if (baseURL.endsWith(\".js\")) {\n    baseURL = baseURL.substr(0, baseURL.lastIndexOf(\"/\"));\n  }\n  if (!baseURL.endsWith(\"/\")) {\n    baseURL += \"/\";\n  }\n  let packageIndexReady = initializePackageIndex(baseURL);\n\n  Module.locateFile = (path) => baseURL + path;\n  let moduleLoaded = new Promise((r) => (Module.postRun = r));\n\n  const scriptSrc = `${baseURL}pyodide.asm.js`;\n  await loadScript(scriptSrc);\n\n  // _createPyodideModule is specified in the Makefile by the linker flag:\n  // `-s EXPORT_NAME=\"'_createPyodideModule'\"`\n  await _createPyodideModule(Module);\n\n  // There is some work to be done between the module being \"ready\" and postRun\n  // being called.\n  await moduleLoaded;\n\n  // Bootstrap step: `runPython` needs access to `Module.globals` and\n  // `Module.pyodide_py`. Use `runPythonSimple` to add these. runPythonSimple\n  // doesn't dedent the argument so the indentation matters.\n  Module.runPythonSimple(`\ndef temp(Module):\n  import pyodide\n  import __main__\n  import builtins\n\n  globals = __main__.__dict__\n  globals.update(builtins.__dict__)\n\n  Module.version = pyodide.__version__\n  Module.globals = globals\n  Module.builtins = builtins.__dict__\n  Module.pyodide_py = pyodide\n`);\n\n  Module.saveState = () => Module.pyodide_py._state.save_state();\n  Module.restoreState = (state) =>\n    Module.pyodide_py._state.restore_state(state);\n\n  Module.init_dict.get(\"temp\")(Module);\n  // Module.runPython works starting from here!\n\n  // Wrap \"globals\" in a special Proxy that allows `pyodide.globals.x` access.\n  // TODO: Should we have this?\n  Module.globals = wrapNamespace(Module.globals);\n\n  fixRecursionLimit();\n  let pyodide = makePublicAPI();\n  pyodide.globals = Module.globals;\n  pyodide.pyodide_py = Module.pyodide_py;\n  pyodide.version = Module.version;\n\n  registerJsModule(\"js\", globalThis);\n  registerJsModule(\"pyodide_js\", pyodide);\n\n  await packageIndexReady;\n  if (config.fullStdLib) {\n    await loadPackage([\"distutils\"]);\n  }\n\n  return pyodide;\n}\nglobalThis.loadPyodide = loadPyodide;\n\nif (globalThis.languagePluginUrl) {\n  console.warn(\n    \"languagePluginUrl is deprecated and will be removed in version 0.18.0, \" +\n      \"instead use loadPyodide({ indexURL : <some_url>})\"\n  );\n\n  /**\n   * A deprecated parameter that specifies the Pyodide ``indexURL``. If present,\n   * Pyodide will automatically invoke\n   * ``loadPyodide({indexURL : languagePluginUrl})``\n   * and will store the resulting promise in\n   * :any:`globalThis.languagePluginLoader`. Use :any:`loadPyodide`\n   * directly instead of defining this.\n   *\n   * @type String\n   * @deprecated Will be removed in version 0.18.0\n   */\n  globalThis.languagePluginUrl;\n\n  /**\n   * A deprecated promise that resolves to ``undefined`` when Pyodide is\n   * finished loading. Only created if :any:`languagePluginUrl` is\n   * defined. Instead use :any:`loadPyodide`.\n   *\n   * @type Promise\n   * @deprecated Will be removed in version 0.18.0\n   */\n  globalThis.languagePluginLoader = loadPyodide({\n    indexURL: globalThis.languagePluginUrl,\n  }).then((pyodide) => (self.pyodide = pyodide));\n}\n"],"names":["baseURL","Module","async","initializePackageIndex","indexURL","response","fetch","packages","json","noImageDecoding","noAudioDecoding","noWasmDecoding","preloadedWasm","package_uri_regexp","_uri_to_package_name","package_uri","match","exec","toLowerCase","loadScript","self","document","url","import","importScripts","Error","recursiveDependencies","names","_messageCallback","errorCallback","sharedLibsOnly","dependencies","sharedLibraries","shared_library","toLoad","Map","addPackage","pkg","has","set","undefined","loadedPackages","dep","name","pkgname","get","onlySharedLibs","c","_loadPackage","messageCallback","locateFile","path","replace","size","Promise","resolve","Array","from","keys","join","scriptPromises","uri","loaded","orig_case","scriptSrc","push","catch","e","delete","all","then","promise","r","monitorRunDependencies","n","addRunDependency","removeRunDependency","resolveMsg","packageList","length","reportUndefinedSymbols","runPythonSimple","_package_lock","loadPackage","isPyProxy","temp","toJs","destroy","isArray","oldPlugin","sharedLibraryNames","sharedLibraryPackagesToLoad","p","preloadPlugins","canHandle","loadPluginOverride","Proxy","obj","prop","bytes","apply","arguments","this","loadDynamicLibrary","global","nodelete","unshift","releaseLock","old_lock","acquirePackageLock","console","log","error","shift","jsobj","$$","type","globalThis","FinalizationRegistry","finalizationRegistry","ptr","_Py_DecRef","fatal_error","[object Object]","trace_pyproxy_alloc","trace_pyproxy_dealloc","pyproxy_alloc_map","_getPtr","destroyed_msg","enable_pyproxy_allocation_tracing","proxy","stack","disable_pyproxy_allocation_tracing","pyproxy_new","ptrobj","target","flags","_pyproxy_getflags","cls","getPyProxyClass","Reflect","construct","Function","prototype","Object","create","defineProperty","value","_Py_IncRef","PyProxyHandlers","register","pyproxyClassMap","result","descriptors","feature_flag","methods","PyProxyLengthMethods","PyProxyGetItemMethods","PyProxySetItemMethods","PyProxyContainsMethods","PyProxyIterableMethods","PyProxyIteratorMethods","PyProxyAwaitableMethods","PyProxyBufferMethods","PyProxyCallableMethods","assign","getOwnPropertyDescriptors","constructor","getOwnPropertyDescriptor","PyProxyClass","$$flags","new_proto","NewPyProxyClass","PyProxy_getPtr","callPyObjectKwargs","jsargs","kwargs","pop","num_pos_args","kwargs_names","kwargs_values","values","num_kwargs","idresult","idargs","hiwire","new_value","idkwnames","__pyproxy_apply","decref","_pythonexc2js","pop_value","callPyObject","TypeError","Symbol","toStringTag","__pyproxy_type","jsref_repr","__pyproxy_repr","unregister","depth","proxies","_python2js_with_depth","_PyObject_Size","key","idkey","__pyproxy_getitem","_PyErr_Occurred","errcode","idval","__pyproxy_setitem","__pyproxy_delitem","__pyproxy_contains","TempError","iterator","iterptr","token","_PyObject_GetIter","item","__pyproxy_iter_next","iter_helper","arg","done","idarg","__pyproxyGen_Send","__pyproxyGen_FetchStopIterationValue","isExtensible","jskey","__pyproxy_hasattr","python_hasattr","startsWith","slice","__pyproxy_getattr","python_getattr","jsval","description","descr","writable","__pyproxy_setattr","python_setattr","__pyproxy_delattr","python_delattr","configurable","__pyproxy_ownKeys","ownKeys","jsthis","resolveHandle","rejectHandle","reject","resolve_handle_id","reject_handle_id","__pyproxy_ensure_future","onFulfilled","onRejected","_ensure_future","onFinally","finally","type_to_array_map","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","BigInt64Array","BigUint64Array","Float32Array","Float64Array","DataView","ArrayType","buffer_struct_ptr","this_ptr","__pyproxy_get_buffer","HEAP32","cur_ptr","startByteOffset","minByteOffset","maxByteOffset","readonly","format_ptr","itemsize","shape","strides","view_ptr","c_contiguous","f_contiguous","format","UTF8ToString","_PyMem_Free","success","bigEndian","processBufferFormatString","alignment","parseInt","numBytes","data","numEntries","offset","buffer","i","PyBuffer","ndim","nbytes","_view_ptr","_released","_PyBuffer_Release","globalsPropertyAccessWarned","globalsPropertyAccessWarningMsg","NamespaceProxyHandlers","warn","Set","iter","add","pyodide_py","globals","PythonError","message","runPython","code","eval_code","loadPackagesFromImports","imports","pyimports","find_imports","packageNames","import_name_to_package_name","pyimport","runPythonAsync","eval_code_async","coroutine","registerJsModule","module","register_js_module","registerComlink","Comlink","_Comlink","unregisterJsModule","unregister_js_module","toPy","obj_id","py_result","__js2python_convert","_JsProxy_Check","_python2js","setInterruptBuffer","interrupt_buffer","dump_traceback","__Py_DumpTraceback","_PyGILState_GetThisThreadState","fatal_error_occurred","loadPyodide","config","fullStdLib","__pyodide_module","languagePluginURL","inProgress","endsWith","substr","lastIndexOf","packageIndexReady","moduleLoaded","postRun","ns","_createPyodideModule","saveState","_state","save_state","restoreState","state","restore_state","init_dict","recurse","err","recursionLimit","Math","min","fixRecursionLimit","pyodide","namespace","version","_module","public_api","makePublicAPI","enumerable","on_fatal","err2","code_c_string","stringToNewUTF8","_run_python_simple_inner","_free","languagePluginUrl","languagePluginLoader"],"mappings":"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"}